{"version":3,"sources":["Navbar.js","MapLegend.js","OverlayContainer.js","ChoroplethMap.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","rightNavbarRef","useRef","useEffect","navbarDiv","d3","current","searchInput","append","attr","text","remove","select","React","createElement","className","href","ref","MapLegend","label","color","map","cat","index","key","style","backgroundColor","OverlayContainer","containerRef","containerDiv","infoBox","indicesContainer","name","value","forEach","indexDiv","progressBarContainer","concat","forecastData","Array","fill","_","i","day","Math","floor","hour","quality","random","qualityColorScale","domain","range","selectAll","data","enter","d","ChoroplethMap","mapContainer","mapboxgl","accessToken","Map","container","center","zoom","on","addSource","type","addLayer","id","source","paint","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.13e74733.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\"\nimport * as d3 from \"d3\"\nimport \"../src/css/Navbar.css\"\n\nconst Navbar = () => {\n  const rightNavbarRef = useRef()\n\n  useEffect(() => {\n    const navbarDiv = d3.select(rightNavbarRef.current)\n\n    const searchInput = navbarDiv\n      .append(\"input\")\n      .attr(\"type\", \"text\")\n      .attr(\"placeholder\", \"Search location\")\n\n    navbarDiv\n      .append(\"button\")\n      .text(\"Search\") // Add the button text\n      .attr(\"type\", \"submit\")\n\n    // Cleanup function\n    return () => {\n      searchInput.remove()\n      // Also remove the search button when the component unmounts\n      navbarDiv.select(\"button\").remove()\n    }\n  }, [])\n\n  return (\n    <nav className=\"navbar\">\n      <div className=\"left-navbar\">\n        <div className=\"logo\">CitizAir</div>\n        <div className=\"menu\">\n          <a href=\"#\" className=\"menu-item\">\n            All about Air Pollution\n          </a>\n          <a href=\"#\" className=\"menu-item\">\n            About Us\n          </a>\n        </div>\n      </div>\n      <div className=\"right-navbar\" ref={rightNavbarRef}></div>\n    </nav>\n  )\n}\n\nexport default Navbar\n","import React from \"react\";\nimport \"../src/css/MapLegend.css\"; // Ensure the path is correctly adjusted to where your CSS file is located.\n\nconst MapLegend = () => {\n  // Legend categories\n  const categories = [\n    { label: \"Good\", color: \"#55A84F\" },\n    { label: \"Moderate\", color: \"#A3C853\" },\n    { label: \"Unhealthy for Sensitive Group\", color: \"#FFF833\" },\n    { label: \"Unhealthy\", color: \"#F29930\" },\n    { label: \"Very Unhealthy\", color: \"#E93F33\" },\n    { label: \"Hazardous\", color: \"#AF2D24\" },\n  ];\n\n  return (\n    <div className=\"map-legend\">\n      <h4>Legend</h4>\n      {categories.map((cat, index) => (\n        <div key={index} className=\"legend-category\">\n          <div\n            className=\"legend-color\"\n            style={{ backgroundColor: cat.color }}\n          ></div>\n          <span className=\"legend-label\">{cat.label}</span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default MapLegend;\n","import React, { useEffect, useRef } from \"react\"\nimport * as d3 from \"d3\"\nimport \"../src/css/OverlayContainer.css\"\n\nconst OverlayContainer = () => {\n  const containerRef = useRef()\n\n  useEffect(() => {\n    // Select the ref and append the overlay container div\n    const containerDiv = d3\n      .select(containerRef.current)\n      .append(\"div\")\n      .attr(\"class\", \"overlay-container\")\n\n    // Append the info box\n    const infoBox = containerDiv.append(\"div\").attr(\"class\", \"info-box\")\n\n    // Append elements to the info box\n    infoBox.append(\"h3\").text(\"Odenplan\")\n    infoBox.append(\"button\").attr(\"class\", \"status-button\").text(\"GOOD\")\n\n    // Append the indices container below the 'GOOD' button\n    const indicesContainer = infoBox\n      .append(\"div\")\n      .attr(\"class\", \"indices-container\")\n\n    // Placeholder data structure\n    const indices = [\n      { name: \"AQI\", value: 20 },\n      { name: \"NoX\", value: 70 },\n      { name: \"PM10\", value: 48 },\n    ]\n\n    indices.forEach((index) => {\n      const indexDiv = indicesContainer.append(\"div\").attr(\"class\", \"index\")\n\n      indexDiv.append(\"span\").attr(\"class\", \"index-name\").text(index.name)\n\n      const progressBarContainer = indexDiv\n        .append(\"div\")\n        .attr(\"class\", \"progress-bar-container\")\n\n      progressBarContainer.append(\"div\").attr(\"class\", \"progress-bar-full\") // This is the full bar\n\n      progressBarContainer\n        .append(\"div\")\n        .attr(\"class\", \"progress-bar-fill\") // This is the filled part\n        .style(\"width\", `${index.value}%`)\n    })\n\n    const forecastSection = containerDiv\n      .append(\"div\")\n      .attr(\"class\", \"forecast-section\")\n\n    forecastSection\n      .append(\"h4\")\n      .text(\"3 Day Forecast\")\n      .attr(\"class\", \"forecast-heading\")\n\n    // Placeholder for 3-day forecast data, with 24 hours each day\n    const forecastData = new Array(3 * 24).fill().map((_, i) => {\n      return {\n        day: Math.floor(i / 24) + 1,\n        hour: i % 24,\n        // Dummy value for air quality, replace with real data later\n        quality: Math.floor(Math.random() * 6) + 1, // Assuming 1-6 scale for quality\n      }\n    })\n\n    // Map quality to colors (this should match your actual data thresholds)\n    const qualityColorScale = d3\n      .scaleOrdinal()\n      .domain([1, 2, 3, 4, 5, 6])\n      .range([\"#55A84F\", \"#A3C853\", \"#FFF833\", \"#F29930\", \"#E93F33\", \"#AF2D24\"])\n\n    // Create a grid for the forecast squares\n    const forecastContainer = containerDiv\n      .append(\"div\")\n      .attr(\"class\", \"forecast-container\")\n\n    forecastContainer\n      .selectAll(\".forecast-square\")\n      .data(forecastData)\n      .enter()\n      .append(\"div\")\n      .attr(\"class\", \"forecast-square\")\n      .style(\"background-color\", (d) => qualityColorScale(d.quality))\n\n    // Clean up on unmount\n    return () => {\n      containerDiv.remove() // This now correctly removes the entire overlay container\n    }\n  }, [])\n\n  return <div ref={containerRef} />\n}\n\nexport default OverlayContainer\n","import React, { useRef, useEffect } from \"react\"\nimport MapLegend from \"./MapLegend\"\nimport mapboxgl from \"mapbox-gl\" // Import mapboxgl\nimport OverlayContainer from \"./OverlayContainer\"\n\nconst ChoroplethMap = () => {\n  const mapContainer = useRef(null)\n\n  useEffect(() => {\n    mapboxgl.accessToken =\n      \"pk.eyJ1Ijoia3ByaWp1biIsImEiOiJjajd4OHVweTYzb2l1MndvMzlvdm90c2ltIn0.J25C2fbC1KpcqIRglAh4sA\"\n    const map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/kprijun/clsns5ahr006g01pkfe183e2m\",\n      center: [18.0686, 59.3293],\n      zoom: 12,\n    })\n\n    map.on(\"load\", () => {\n      map.addSource(\"earthquakes\", {\n        type: \"geojson\",\n        // Use a URL for the value for the `data` property.\n        data: \"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\",\n      })\n\n      map.addLayer({\n        id: \"earthquakes-layer\",\n        type: \"circle\",\n        source: \"earthquakes\",\n        paint: {\n          \"circle-radius\": 4,\n          \"circle-stroke-width\": 2,\n          \"circle-color\": \"red\",\n          \"circle-stroke-color\": \"white\",\n        },\n      })\n    })\n\n    return () => map.remove()\n  }, [])\n\n  return (\n    <div className=\"choropleth-map\" ref={mapContainer}>\n      <OverlayContainer />\n    </div>\n  )\n}\n\nexport default ChoroplethMap\n","import React from \"react\"\nimport Navbar from \"./Navbar\"\nimport ChoroplethMap from \"./ChoroplethMap\"\nimport MapLegend from \"./MapLegend\"\nimport \"./css/App.css\"\nimport \"./css/Navbar.css\"\nimport \"../src/css/ChoroplethMap.css\"\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className=\"content\">\n        <MapLegend />\n        <ChoroplethMap />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport \"../src/css/index.css\"\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}